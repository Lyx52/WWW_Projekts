@using Microsoft.AspNetCore.Components
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text.Encodings.Web
@using System.Web
@using Domain.Interfaces
@using Domain.Models
@using Infrastructure.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inject UserManager<ApplicationUser> _userManager;
@inject IEntityRepository<Listing> _listingRepository;
@inject IEntityRepository<ListingCategory> _categoryRepository

<EditForm EditContext="@_editContext" class="row g-5" OnValidSubmit="CreateOrSaveListing">
    <DataAnnotationsValidator/>
    <div class="col-md-5 col-lg-4 order-sm-first order-md-last">
        <FileUpload Images="@_input.Images" User="_user"/>
    </div>
    <div class="col-md-7 col-lg-8">
        <h4 class="mb-3">Izveidot sludinājumu</h4>
        <div class="row g-3">
            <div class="col-12">
                <label for="listingTitle">Virsraksts</label>
                <InputText @bind-Value="@_input.Title" class="form-control" id="listingTitle"/>
                <ValidationMessage class="text-danger" For="@(() => _input.Title)"/>
            </div>
            <div class="col-12">
                <label for="listingDesc">Apraksts</label>
                <InputTextArea id="listingDesc" @bind-Value="@_input.Description" class="form-control" style="height: 120px;"/>
                <ValidationMessage For="@(() => _input.Description)"/>
            </div>
            <div class="col-4">
                <label for="listingPrice">Cena</label>
                <InputText id="listingPrice" @bind-Value="@_input.PriceInput" class="form-control" placeholder="Price"/>
                <ValidationMessage For="@(() => _input.Price)"/>
            </div>
            <div class="col-8">
                <label for="listingCategory">Kategorija</label>
                <CategoryDropdown Id="listingCategory" @bind-Category="_input.Category" @bind-Category:event="SelectedCategoryChanged"/>
                <ValidationMessage For="@(() => _input.Category)"/>
            </div>
        </div>
        <hr class="my-4">
        
        <button class="w-100 btn btn-primary btn-lg" type="submit">
            @(IsEditListing ? "Saglabāt" : "Izviedot")
        </button>
    </div>
</EditForm>
@code {

    [Parameter]
    public string? ListingIdUrl { get; set; }
    
    public int? ListingId { get; set; } = null;
    public bool IsEditListing { get; set; } = false;
    private CreateListingModel _input { get; set; } = new ();
    private EditContext _editContext;
    private ApplicationUser _user { get; set; }
    protected int _selectedCategoryId { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var userClaim = authState.User;
        _user = await _userManager.GetUserAsync(userClaim);
        if (userClaim.Identity is null || !userClaim.Identity.IsAuthenticated || _user is null)
        {
            NavigationManager.NavigateTo("/Account/Login");
        }
        var parameters = HttpUtility.ParseQueryString(new Uri(NavigationManager.Uri).Query);
        try
        {
            ListingId = parameters["id"]?.Decode();
        }
        catch (FormatException)
        {
            NavigationManager.NavigateTo("/Index");
        }
        if (ListingId is not null)
        {
            var listing = await _listingRepository.AsQueryable()
                .Include(l => l.CreatedBy)
                .Include(l => l.Images)
                .Include(l => l.Category)
                .Include(l => l.CreatedBy)
                .Where(l => l.Id == ListingId && l.CreatedBy!.Id == _user!.Id)
                .FirstOrDefaultAsync();
            if (listing is null)
                NavigationManager.NavigateTo("/Index");
            IsEditListing = true;
            _input.Id = listing!.Id;
            _input.Category = listing.Category;
            _input.Title = listing.Title;
            _input.Images = listing.Images;
            _input.Price = listing.Price;
            _input.Description = listing.Description;
        }
        _editContext = new EditContext(_input);
        StateHasChanged();
    }
    private async Task CreateOrSaveListing(EditContext context)
    {
        var listing = new Listing()
        {
            Id = _input.Id ?? 0,
            Description = _input.Description,
            Title = _input.Title,
            Images = _input.Images,
            CreatedByKey = _user.Id,
            Created = DateTime.UtcNow,
            Price = _input.Price,
            CategoryId = _input.Category!.Id
        };
        listing.Images!.ForEach(i => i.Listing = listing);
        if (IsEditListing)
        {
            await _listingRepository.Update(listing);
        }
        else
        {
            await _listingRepository.Add(listing);    
        }
        NavigationManager.NavigateTo($"/Listings/Index/{listing.Encode()}", true, true);
    }
    private class CreateListingModel
    {
        public int? Id { get; set; }
        [Required(ErrorMessage = "Virsraksts ir nepieciešams")]
        [MinLength(8, ErrorMessage = "Virsraksts nav pietiekami garš")]
        [DisplayName("Virsraksts")]
        public string Title { get; set; } = string.Empty;

        [Required(ErrorMessage = "Apraksts ir nepieciešams")]
        [MinLength(20, ErrorMessage = "Apraksts nav pietiekami garš")]
        [DisplayName("Apraksts")]
        public string Description { get; set; } = string.Empty;

        [Required(ErrorMessage = "Cena ir nepieciešama")]
        [DisplayFormat(DataFormatString = "2dp")]
        public float Price { get; set; } = 0;
        
        [Required(ErrorMessage = "Kategorija ir nepieciešama!")]
        public ListingCategory? Category { get; set; } = null!;

        public string PriceInput
        {
            get => Price.ToString("C", new CultureInfo("lv-LV"));
            set => Price = float.TryParse(value.Replace('.',','), NumberStyles.Currency, new CultureInfo("lv-LV"), out float output) ? (float)Math.Round(output, 2) : 0f;
        }
        [MinLength(1, ErrorMessage = "Nepieciešams vismaz viens attēls")]
        public List<ListingImage>? Images { get; set; } = new List<ListingImage>();
    }
}