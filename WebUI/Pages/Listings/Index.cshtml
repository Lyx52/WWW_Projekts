@page "{listingId?}"
@using WebProject.Pages.Shared
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.DataProtection
@using Domain.Models
@model WebProject.Pages.Listings.Index

@attribute [ValidateAntiForgeryToken]
@inject IDataProtectionProvider _dataProtector
@inject UserManager<ApplicationUser> _userManager;
@inject SignInManager<ApplicationUser> SignInManager
@{
    ViewData["Title"] = Model.Listing is null ? string.Empty : Model.Listing.Title;
    var messageProtector = _dataProtector.CreateProtector("MessageProvider");
}
<div class="py-3 listing-container">
    <div class="container-fluid w-100">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-8">
                @{ await Html.RenderPartialAsync("Shared/ImageGalleryPartial", new ImageGalleryModel { Images = Model!.Listing!.Images, GalleryId = Model.Listing.Id }); }
            </div>
            <div class="col-12 col-lg-4">
                <div class="container-fluid px-2">
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb mb-1">
                            <li class="breadcrumb-item">@Model.Listing.Category!.ParentCategory!.ParentCategory!.Name</li>
                            <li class="breadcrumb-item">@Model.Listing.Category!.ParentCategory!.Name</li>
                            <li class="breadcrumb-item active" aria-current="page">@Model.Listing.Category.Name</li>
                        </ol>
                    </nav>
                    <h2 class="pb-2 border-bottom">@Model.Listing.Title</h2>
                    <div class="row row-cols-1 g-1">
                        <div class="col d-flex align-items-start">
                            <div class="w-100">
                                <h3 class="fs-2">Cena: @Model.Listing.DisplayPrice</h3>
                                <p class="listing-description w-100">@(Html.DisplayTextFor(m => m.Listing!.Description))</p>

                                @* Rādām tikai authorizētiem lietotājiem *@
                                @if (SignInManager.IsSignedIn(User))
                                {
                                    // Nevaram nosūtīt sev 
                                    var user = await _userManager.GetUserAsync(User);
                                    if (user is not null && Model.Listing.CreatedBy?.Id != user.Id)
                                    {
                                        // Parādām vai ziņa nosūtīta
                                        @if (Model.MessageSent)
                                        {
                                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                                                <strong>Ziņa nosūtīta!</strong>
                                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                            </div>
                                        }

                                        var pdata = messageProtector.Protect($"{Model.Listing.CreatedBy.Id}|{Request.Path}");
                                        <button onclick="openMessageModal('@pdata')" type="button" class="float-end btn btn-primary" data-bs-toggle="modal" data-bs-target="#messageModal">
                                            Sūtīt ziņu <i class="bi bi-chat-dots"></i>
                                        </button>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>