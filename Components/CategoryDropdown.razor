@using WebProject.Core.Models
@using WebProject.Core.Interfaces
@using Microsoft.EntityFrameworkCore
@inject IEntityRepository<ListingCategory> _categoryRepository
<div class="dropdown">
  @if (_rootCategory is not null)
  {
      <button @onclick="@(e => ShowMenu = !ShowMenu)" class="btn dropdown-toggle" type="button" id="dropdownMenuButton" aria-expanded="false">
        @(_selectedCategory is null ? "--Izvēlēties kategoriju--" : _selectedCategory.Name)
      </button>
      <ul class="dropdown-menu @(ShowMenu ? "show" : "hide")" aria-labelledby="dropdownMenuButton">
          @foreach (ListingCategory firstCat in _rootCategory.SubCategories)
          {
              <li>
                  <a class="dropdown-item">
                    @firstCat.Name &raquo;
                  </a>
                  <ul class="dropdown-menu dropdown-submenu">
                      @foreach (ListingCategory secondCat in firstCat.SubCategories)
                      {
                          <li>
                              <a class="dropdown-item">
                                @secondCat.Name &raquo;
                              </a>
                              <ul class="dropdown-menu dropdown-submenu">
                                  @foreach (ListingCategory thirdCat in secondCat.SubCategories)
                                  {
                                      <li>
                                          <a class="dropdown-item" @onclick="@(async (e) => await OnCategorySelected(thirdCat))">
                                              <strong>@thirdCat.Name</strong>
                                          </a>
                                      </li>
                                  }
                              </ul>
                          </li>
                      }
                  </ul>
              </li>
          }
      </ul>
  }
</div>
@code {

    [Parameter]
    public string Id { get; set; }
    
    [Parameter]
    public EventCallback<ListingCategory> SelectedCategoryChanged { get; set; }
    
    [Parameter]
    public ListingCategory Category { get; set; }


    private ListingCategory _selectedCategory { get; set; }
    private bool ShowMenu { get; set; } = false;
    private ListingCategory? _rootCategory { get; set; }
    
    private async Task OnCategorySelected(ListingCategory selected)
    {
        await SelectedCategoryChanged.InvokeAsync(selected);
        _selectedCategory = selected;
        ShowMenu = false;
        StateHasChanged();
        
    }
    protected override async Task OnInitializedAsync()
    {
        _rootCategory = await _categoryRepository.AsQueryable()
            .Include(c => c.SubCategories)! // First level
            .ThenInclude(c => c.SubCategories)! // Second level
            .ThenInclude(c => c.SubCategories) // Third level
            .Where(c => c.Id == -1)
            .FirstOrDefaultAsync(); // Default category "Uncategorized" category
    }
    
}